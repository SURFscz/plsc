#!/usr/bin/env python3

import sys
import yaml
import socket
import copy
import ldap

import util
from sldap import sLDAP
from sbs import SBS

from typing import Tuple, List, Dict, Optional, Union

SBSPerson = Dict[str, str]
LDAPEntry = Dict[str, List[Union[str, int]]]


# Here's the magic: Build the new person entry
def sbs2ldap_record(sbs_uid: str, sbs_user: SBSPerson) -> Tuple[str, LDAPEntry]:
    record: LDAPEntry = dict(
        objectClass=['inetOrgPerson', 'person', 'posixAccount', 'eduPerson', 'voPerson']
    )

    record['eduPersonUniqueId'] = [sbs_uid]

    record['displayName'] = [sbs_user.get('name')]
    record['givenName'] = [sbs_user.get('given_name')]
    record['sn'] = [sbs_user.get('family_name')]
    # cn is required in the posixAccount schema, otherwise we wouldn't use it
    record['cn'] = record['displayName']

    record['mail'] = [sbs_user.get('email')]

    # affiliation
    record['voPersonExternalAffiliation'] = [sbs_user.get('scoped_affiliation')]
    # TODO: fix this hack. ePSA is not stored in SBS, but as it is always fixes, we can hardcode it here
    record['eduPersonScopedAffiliation'] = ['member@sram.surf.nl']

    # principal name
    record['voPersonExternalID'] = [sbs_user.get('eduperson_principal_name')]
    # TODO: expose this in SBS
    #record['eduPersonPrincipalName'] = ['bla']

    # posixAccount
    username = sbs_user.get('username')

    record['uid'] = [username]
    record['homeDirectory'] = [f'/home/{username}']
    if sbs_user.get('ssh_key'):
        record['sshPublicKey'] = [sbs_user.get('ssh_key')]
        record['objectClass'].append('ldapPublicKey')

    # clean up the lists, such that we return empty lists if no attribute it present, rather than [None]
    for key, val in record.items():
        record[key] = list(filter(None, record[key]))

    rdn = f"uid={username}"

    return rdn, record


if len(sys.argv) < 2:
    sys.exit(sys.argv[0] + "  <conf.yml>")

with open(sys.argv[1]) as f:
    config = yaml.safe_load(f)

src = SBS(config['sbs']['src'])
dst = sLDAP(config['ldap']['dst'])
fqdn = socket.getfqdn() + ':slp'
# print(f"fqdn: {fqdn}")

# Find all CO's in SBS
collaborations = src.service_collaborations()

# vc keeps track of visited CO's so we can delete what
# we have not seen in the Cleanup phase
vc = {}

# Create phase
print("--- Create ---")
for service, cos in collaborations.items():
    vc[service] = {}
    print("service: {}".format(service))

    # check if service exists and create it if necessary
    service_dn = f"dc={service},{dst.basedn}"

    # find existing services
    service_dns = dst.find(dst.basedn, f"(&(objectClass=dcObject)(dc={service}))")
    if len(service_dns) == 0:  # no existing service found
        service_entry = {'objectClass': ['dcObject', 'organization'], 'dc': [service], 'o': [service]}
        dst.add(service_dn, service_entry)

        admin_dn = 'cn=admin,' + service_dn
        admin_entry = {'objectClass': ['organizationalRole', 'simpleSecurityObject'], 'cn': ['admin'],
                       'userPassword': [config['pwd']]}
        dst.add(admin_dn, admin_entry)

        seq_dn = 'ou=Sequence,' + service_dn
        seq_entry = {'objectClass': ['top', 'organizationalUnit'], 'ou': ['Sequence']}
        dst.add(seq_dn, seq_entry)

        uid_dn = 'cn=uidNumberSequence,ou=Sequence,' + service_dn
        uid_entry = {'objectClass': ['top', 'device'], 'serialNumber': [config['uid']]}
        dst.add(uid_dn, uid_entry)

        gid_dn = 'cn=gidNumberSequence,ou=Sequence,' + service_dn
        gid_entry = {'objectClass': ['top', 'device'], 'serialNumber': [config['gid']]}
        dst.add(gid_dn, gid_entry)

    # check if dc=ordered subtree exists and create it if necessary
    ordered_dns = dst.rfind(f"dc={service}", "(&(objectClass=dcObject)(dc=ordered))")
    if len(ordered_dns) == 0:
        ordered_dn = f"dc=ordered,dc={service},{dst.basedn}"
        ordered_entry = {'objectClass': ['dcObject', 'organization'], 'dc': ['ordered'], 'o': [service]}
        dst.add(ordered_dn, ordered_entry)

    # iterate over all COs that are connected to this service
    for co_id, co in cos.items():
        if 'short_name' not in co or 'short_name' not in co['organisation']:
            raise Exception(f"Encountered CO without short_name: {co}")
        co_identifier = "{}:{}".format(co['organisation']['short_name'], co['short_name'])

        print("- co: {}/{}".format(co_id, co_identifier))
        vc[service][co_identifier] = {}
        vc[service][co_identifier]['roles'] = {}
        vc[service][co_identifier]['members'] = []

        # Skip unknown CO's
        organizations = dst.rfind(f"dc=ordered,dc={service}",
                                  f"(&(objectClass=organization)(objectClass=extensibleObject)(o={co_identifier}))")
        if len(organizations):
            o_dn, o_entry = list(organizations.items())[0]
            co_fqdn = o_entry.get('host', [])
            if fqdn not in co_fqdn and False:
                print("skipping {}".format(co_fqdn))
                # continue

        # Create CO if necessary
        co_dn = f"o={co_identifier},dc=ordered,dc={service},{dst.basedn}"
        co_entry = {
            'objectClass': ['top', 'organization', 'extensibleObject','labeledURIObject'],
            'o': [co_identifier],
            'host': [fqdn],
            'labeledURI': [co_id],
        }
        if co.get('description'):
            co_entry['description'] = [co.get('description')]
        if co.get('name'):
            co_entry['displayName'] = [co.get('name')]

        co_dns = dst.rfind(f"dc=ordered,dc={service}", f"(&(objectClass=organization)(o={co_identifier}))")
        if len(co_dns) == 0:
            dst.add(co_dn, co_entry)
            for ou in ['Groups', 'People']:
                ou_dn = 'ou=' + ou + ',' + co_dn
                ou_entry = {'objectClass': ['top', 'organizationalUnit'], 'ou': [ou]}
                dst.add(ou_dn, ou_entry)
        elif len(co_dns) == 1:
            current_entry = list(co_dns.values())[0]
            dst.modify(co_dn, current_entry, co_entry)
        else:
            raise Exception(f"Found multiple COs for o={co_identifier}")

        print("  - People")
        users = src.users(co_id)
        # print(f"users: {users}")

        for src_id, src_detail in users.items():
            # print(f"user: {src_detail}")
            src_user = src_detail['user']
            print("    - src_id: {}/{}".format(src_id, src_user['uid']))
            src_uid = util.uid(src_user)

            # convert the BS data to an ldap record
            dst_rdn, dst_entry = sbs2ldap_record(src_uid, src_user)

            # add the uidNumber and gidNumber
            uidNumber = None
            gidNumber = None
            dst_dns = dst.rfind(f"dc=ordered,dc={service}", f"(&(ObjectClass=person)(eduPersonUniqueId={src_uid}))")
            if dst_dns:
                old_dn, old_entry = list(dst_dns.items())[0]
                uidNumber = old_entry.get('uidNumber', 0)[0]
                gidNumber = old_entry.get('gidNumber', 0)[0]

            if uidNumber is None:
                uidNumber = dst.get_sequence(f"cn=uidNumberSequence,ou=Sequence,dc={service},{dst.basedn}")
            if gidNumber is None:
                gidNumber = dst.get_sequence(f"cn=gidNumberSequence,ou=Sequence,dc={service},{dst.basedn}")

            dst_entry['uidNumber'] = [uidNumber]
            dst_entry['gidNumber'] = [gidNumber]

            dst_dn = f"{dst_rdn},ou=People,o={co_identifier},dc=ordered,dc={service},{dst.basedn}"

            print(f"      - store {dst_dn}: ", end='')
            try:
                ldif = dst.store(dst_dn, dst_entry)
            except ldap.OBJECT_CLASS_VIOLATION as e:
                continue
            print(ldif)

            # record user as CO member
            vc[service][co_identifier]['members'].append(src_uid)

            # handle groups
            print("    - Groups")
            roles = src_detail['roles']

            for grp_id, grp_name in roles.items():

                print("      - grp: {}/{}".format(grp_id, grp_name))
                vc[service][co_identifier]['roles'].setdefault(grp_id, []).append(dst_dn)
                vc[service][co_identifier].setdefault('groups', []).append(grp_name)

                grp_dn = f"cn={grp_name},ou=Groups,o={co_identifier},dc=ordered,dc={service},{dst.basedn}"
                grp_dns = dst.rfind(f"ou=Groups,o={co_identifier},dc=ordered,dc={service}",
                                    f"(&(objectClass=sczGroup)(cn={grp_name}))")

                # ipdb.set_trace()
                gidNumber: Optional[int] = None

                if len(grp_dns) == 1:
                    old_dn, old_entry = list(grp_dns.items())[0]
                    gidNumber = old_entry.get('gidNumber', [None])[0]
                    sczMembers = old_entry.get('sczMember', [])
                    if dst_dn not in sczMembers:
                        sczMembers.append(dst_dn)
                elif len(grp_dns) == 0:
                    sczMembers = [dst_dn]
                else:
                    raise Exception("Too many dn's, this shouldn't happen")

                if not gidNumber:
                    gidNumber = dst.get_sequence(f"cn=gidNumberSequence,ou=Sequence,dc={service},{dst.basedn}")

                # Here's the magic: Build the new group entry
                grp_entry = {
                    'objectClass': ['extensibleObject', 'posixGroup', 'sczGroup', 'labeledURIObject'],
                    'cn': [grp_name],
                    'labeledUri': [grp_id],
                    'gidNumber': [gidNumber],
                    'sczMember': sczMembers
                }

                ldif = dst.store(grp_dn, grp_entry)
                print("      - store: {}".format(ldif))

    print()

print("vc: {}".format(vc))
# Cleanup phase
print("-- Cleanup ---")
service_dns = dst.find(f"{dst.basedn}", f"(&(objectClass=organization))", scope=ldap.SCOPE_ONELEVEL)
for service_dn, s in service_dns.items():
    service = s['dc'][0]
    print(f"service: {service}")
    if vc.get(service, None) is None:
        print(f"- {service} not found in our services, deleting")
        # service_dn = f"dc={service},{dst.basedn}"
        dst.rdelete(service_dn)

    organizations = dst.rfind(f"dc=ordered,dc={service}", '(&(objectClass=organization)(objectClass=extensibleObject))')
    for o_dn, o_entry in organizations.items():
        if o_entry.get('o'):
            co_fqdn = o_entry.get('host', [])

            if fqdn not in co_fqdn and False:
                print("skipping {}".format(co_fqdn))
                # continue

            o_rdns = util.dn2rdns(o_dn)
            co = o_rdns['o'][0]
            dc = o_rdns['dc'][1]

            print("  - People")
            src_members = vc.get(dc, {}).get(co, {}).get('members', [])
            dst_dns = dst.rfind("ou=People,o={},dc=ordered,dc={}".format(co, service), '(objectClass=person)')
            for dst_dn, dst_entry in dst_dns.items():
                print("    - dstdn: {}".format(dst_dn))
                if dst_entry.get('eduPersonUniqueId', None):
                    dst_uid = dst_entry['eduPersonUniqueId'][0]
                    if dst_uid not in src_members:
                        print("      dst_uid not found in src_members, deleting {}".format(dst_dn))
                        dst.delete(dst_dn)

            print("  - Groups")
            dst_dns = dst.rfind("ou=Groups,o={},dc=ordered,dc={}".format(co, service), '(objectClass=sczGroup)')
            for dst_dn, dst_entry in dst_dns.items():
                grp_name = dst_entry['cn'][0]
                print("    - dstdn: {}".format(dst_dn))
                # TODO: rework this to use the short_name uri-like cn attribute instead of the sbs id
                src_id = dst_entry.get('labeledURI')
                if src_id is None:
                    print("        sbs identifier not found, deleting {}".format(dst_dn))
                    dst.delete(dst_dn)
                else:
                    new_entry = copy.deepcopy(dst_entry)
                    src_id = src_id[0]
                    dst_members = new_entry.get('sczMember', [])
                    src_members = vc.get(dc, {}).get(co, {}).get('roles', {}).get(int(src_id), [])
                    removed = False
                    # ipdb.set_trace()
                    for dst_member in dst_members:
                        dst_rdn = util.dn2rdns(dst_member)["uid"][0]
                        print("      - dst_member: {}".format(dst_rdn))
                        if dst_member not in src_members:
                            print("        dst_member not found, deleting {}".format(dst_rdn))
                            dst_members.remove(dst_member)
                            removed = True
                    if removed:
                        dst.modify(dst_dn, dst_entry, new_entry)
                    if grp_name not in vc.get(dc, {}).get(co, {}).get('groups', []):
                        print("        grp_name not found, deleting {}".format(dst_dn))
                        dst.delete(dst_dn)

            print("  - CO")
            print(f"    - dstdn: {o_dn}")
            if vc[service].get(co) is None:
                print(f"   - {co} not found in our services, deleting")
                dst.rdelete(o_dn)

        print()
