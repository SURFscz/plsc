#!/usr/bin/env python
# -*- coding: future_fstrings -*-

import sys
import os, yaml, json
import ldap, ldap.modlist
import socket

import util
from sldap import sLDAP

if len(sys.argv) < 2:
    sys.exit(sys.argv[0] + "  <conf.yml>")
    exit()

with open(sys.argv[1]) as f:
    config = yaml.safe_load(f)

src = sLDAP(config['ldap']['src'])
dst = sLDAP(config['ldap']['dst'])
fqdn = socket.getfqdn();

services = util.find_services(src)
#print("services: {}".format(services))
collaborations = util.find_collaborations(src, services)
#print("collaborations: {}".format(collaborations))
src_cos = {}
for client_name, cos in collaborations.items():
    print("client: {}".format(client_name))

    svc = client_name
    svc_dn = f"dc={svc},{dst.basedn}"
    dc_entry = {'objectClass':['dcObject','organization'],'o':[svc]}
    dst.add(svc_dn, dc_entry)
    dc_dn = f"dc=ordered,dc={svc},{dst.basedn}"
    dst.add(dc_dn, dc_entry)

    admin_dn = f"cn=admin,{dc_dn}"
    pwd = util.make_secret(config['pwd'])
    admin_entry = {'objectClass':['organizationalRole','simpleSecurityObject'],'userPassword':[pwd]}
    dst.add(admin_dn, admin_entry)

    seq_dn = 'ou=Sequence,' + svc_dn
    seq_entry = {'objectClass':['top','organizationalUnit'],'ou':['Sequence']}
    #print("  seq_dn: {}".format(seq_dn))
    dst.add(seq_dn, seq_entry)

    uid_dn = 'cn=uidNumberSequence,' + seq_dn
    uid_entry = {'objectClass':['top','device'], 'serialNumber':[str(config['uid'])]}
    #print("  uid_dn: {}".format(uid_dn))
    dst.add(uid_dn, uid_entry)

    gid_dn = 'cn=gidNumberSequence,' + seq_dn
    gid_entry = {'objectClass':['top','device'], 'serialNumber':[str(config['gid'])]}
    #print("  gid_dn: {}".format(gid_dn))
    dst.add(gid_dn, gid_entry)

    # Build client skeleton
    for co, entry in cos:
        src_cos.setdefault(client_name, []).append(co)
        r = src.rfind("o={}".format(co), '(objectClass=*)', [], ldap.SCOPE_BASE)
        if len(r):
            dn, entry = list(r.items())[0]
        else:
            continue
        j = entry.get('description', None)
        description = {}
        if j:
            try:
                description = json.loads(j[0])
            except:
                pass
        if entry.get('dnQualifier', None):
            o = entry['dnQualifier'][0]
        elif description.get('identifier', None):
            o = description['identifier']
        elif description.get('comanage_id', None):
            o = description['comanage_id']
        else:
            o = entry['o'][0]
        co_dn = 'o=' + o + ',' + dc_dn
        co_entry = {'objectClass':['top','organization','extensibleObject'],'o':[o],'description':[co],'host':[f"{fqdn}:plsc"]}
        dst.add(co_dn, co_entry)
        print("co: " + co_dn)

        for ou in ['Groups', 'People']:
            ou_dn = 'ou=' + ou + ',' + co_dn
            ou_entry = {'objectClass':['top','organizationalUnit'],'ou':[ou]}
            #print("  ou_dn: {}".format(ou_dn))
            dst.add(ou_dn, ou_entry)

    print()

# Cleanup phase
print("--- cleanup ---")
# Find entries
dst_services = dst.rfind('', '(&(dc=*)(objectClass=dcObject))', ['dc'], ldap.SCOPE_ONELEVEL)
rm_cos = {}
for k, v in dst_services.items():
    dst_service = v['dc'][0]
    print("dc: {}".format(dst_service))
    dst_collaborations = dst.rfind('dc=ordered,dc={}'.format(dst_service), '(&(host={}:{})(objectClass=organization))'.format(fqdn,'plsc'), ['o', 'description'], ldap.SCOPE_SUBTREE)
    dst_co = {}
    for k, v in dst_collaborations.items():
        co_name = v['description'][0]
        co_nr = v['o'][0]
        print("  co: {}/{}".format(co_name, co_nr))
        if co_name in src_cos.get(dst_service, []):
          print("   - in src")
        else:
          print("   - not in src")
          rm_cos.setdefault(dst_service, []).append(co_nr)
for svc, cos in rm_cos.items():
    for co in cos:
      dst_dn = "o={},dc=ordered,dc={},{}".format(co, svc, dst.basedn)
      print("rm {}".format(dst_dn))
      dst.rdelete(dst_dn)
