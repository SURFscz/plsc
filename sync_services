#!/usr/bin/env python

import sys
import os, yaml, json
import ldap, ldap.modlist
import socket

import util
from connection import Connection

if len(sys.argv) < 2:
    sys.exit(sys.argv[0] + "  <conf.yml>")
    exit()

with open(sys.argv[1]) as f:
    config = yaml.safe_load(f)

src = Connection(config['ldap']['src'])
dst = Connection(config['ldap']['dst'])
fqdn = socket.getfqdn();

services = util.find_services(src)
#print("services: {}".format(services))
collaborations = util.find_collaborations(src, services)
#print("collaborations: {}".format(collaborations))

for client_name, cos in collaborations.items():
    print("client: {}".format(client_name))

    dc = client_name
    dc_dn = 'dc=' + dc + ',' + dst.basedn
    dc_entry = {'objectClass':['dcObject','organization'],'o':[dc]}

    #print("dc_dn: {}".format(dc_dn))
    dst.add(dc_dn, dc_entry)

    admin_dn = 'cn=admin,' + dc_dn
    pwd = util.make_secret(config['pwd'])
    admin_entry = {'objectClass':['organizationalRole','simpleSecurityObject'],'userPassword':[pwd]}
    #print("  admin_dn: {}".format(admin_dn))
    dst.add(admin_dn, admin_entry)

    # Build client skeleton
    for co, entry in cos:
        r = src.rfind("o={}".format(co), '(objectClass=*)', [], ldap.SCOPE_BASE)
        if len(r):
            dn, entry = list(r.items())[0]
        else:
            continue
        j = entry.get('description', None)
        description = {}
        if j:
            try:
                description = json.loads(j[0])
            except:
                pass
        if entry.get('dnQualifier', None):
            o = entry['dnQualifier'][0]
        elif description.get('identifier', None):
            o = description['identifier']
        elif description.get('comanage_id', None):
            o = description['comanage_id']
        else:
            o = entry['o'][0]
        co_dn = 'o=' + o + ',' + dc_dn
        co_entry = {'objectClass':['top','organization','extensibleObject'],'o':[o],'description':[co],'host':[fqdn]}
        dst.add(co_dn, co_entry)
        print("co: " + co_dn)

        for ou in ['Groups', 'People', 'Sequence', 'Services']:
            ou_dn = 'ou=' + ou + ',' + co_dn
            ou_entry = {'objectClass':['top','organizationalUnit'],'ou':[ou]}
            #print("  ou_dn: {}".format(ou_dn))
            dst.add(ou_dn, ou_entry)

        uid_dn = 'cn=uidNumberSequence,ou=Sequence,' + co_dn
        uid_entry = {'objectClass':['top','device'], 'serialNumber':[str(config['uid'])]}
        #print("  uid_dn: {}".format(uid_dn))
        dst.add(uid_dn, uid_entry)

        gid_dn = 'cn=gidNumberSequence,ou=Sequence,' + co_dn
        gid_entry = {'objectClass':['top','device'], 'serialNumber':[str(config['gid'])]}
        #print("  gid_dn: {}".format(gid_dn))
        dst.add(gid_dn, gid_entry)
    print()

# Find entries
if False:
  try:
    r = dst.search(dst.basedn)
    for dn, entry in r:
      print("dn: {}".format(dn))
      print("  {}".format(entry))
  except Exception as e:
    print(e)
