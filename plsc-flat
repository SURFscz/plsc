#!/usr/bin/env python
# -*- coding: future_fstrings -*-

import sys
import yaml, re
import socket
import copy

import util
from connection import Connection

import ipdb
#ipdb.set_trace()

if len(sys.argv) < 2:
    sys.exit(sys.argv[0] + "  <conf.yml>")
    exit()

with open(sys.argv[1]) as f:
  config = yaml.safe_load(f)

src = Connection(config['ldap']['src'])
dst = Connection(config['ldap']['dst'])
fqdn = socket.getfqdn()

services = util.find_ordered_services(src)
print(f"s: {services}")

collaborations = util.find_ordered_collaborations(src, services)
print(f"c: {collaborations}")

vc = {
    'users': set(), # only unique values
    'groups': set(),
}

# Create phase
print("--- Create ---")
for service, cos in collaborations.items():
    print("service: {}".format(service))
    for co_id in cos:
        print(f"- co: {co_id}")

        co_dn = f"dc=flat,dc={service},{dst.basedn}"
        organizations = dst.rfind(f"dc=ordered,dc={service}", f"(&(objectClass=organization)(objectClass=extensibleObject)(o={co_id}))")
        if len(organizations):
            o_dn, o_entry = list(organizations.items())[0]
            co_fqdn = o_entry.get('host', [])
            if not fqdn in co_fqdn:
                print("skipping {}".format(co_fqdn))
                continue

        # Flat dn
        flat_dns = dst.rfind(f"dc={service}", "(&(objectClass=dcObject)(dc=flat))")
        if len(flat_dns) == 0:
            flat_dn = f"dc=flat,dc={service},{dst.basedn}"
            flat_entry = {'objectClass':['dcObject', 'organization'],'dc':['flat'],'o':[fqdn]}
            dst.add(flat_dn, flat_entry)
            for ou in ['Groups', 'People']:
                ou_dn = 'ou=' + ou + ',' + flat_dn
                ou_entry = {'objectClass':['top','organizationalUnit'],'ou':[ou]}
                dst.add(ou_dn, ou_entry)

        print("  People")
        src_dns = src.rfind(f"ou=People,o={co_id},dc=ordered,dc={service}", '(ObjectClass=person)')

        for src_dn, src_entry in src_dns.items():
            print("  - srcdn: {}".format(src_dn))
            src_uid = src_entry['uid'][0]

            vc['users'].add(src_uid)

            dst_dn = f"uid={src_uid},ou=People,{co_dn}"
            dst_dns = dst.rfind("ou=People,dc=flat,dc={}".format(service), "(&(ObjectClass=person)(uid={}))".format(src_uid))
            #ipdb.set_trace()
            # We can't just store People, we need to merge attributes
            if len(dst_dns) == 1:
                old_dn, old_entry = list(dst_dns.items())[0]
                for k,v in old_entry.items():
                    src_entry.setdefault(k,[]).extend(v)
                    src_entry[k] = list(set(src_entry[k]))
            ldif = dst.store(dst_dn, src_entry)
            print("    - store: {}".format(ldif))

        print("\n  Groups")
        grp_dns = src.rfind(f"ou=Groups,o={co_id},dc=ordered,dc={service}", '(objectClass=sczGroup)')

        for grp_dn, grp_entry in grp_dns.items():
            print("  - grpdn: {}".format(grp_dn))

            grp_rdns = util.dn2rdns(grp_dn)
            grp_cn = grp_rdns['cn'][0]
            print(f"cn: {grp_cn}")

            vc['groups'].add(grp_cn)

            members = []

            # Build members, remove o= from member DN's
            for member in grp_entry['sczMember']:
                member_rdns = util.dn2rdns(member)
                member_uid = member_rdns['uid'][0]
                member_dn = f"uid={member_uid},ou=People,{co_dn}"
                members.append(member_dn)
                print(f"uid: {member_dn}")

            old_entry = copy.deepcopy(grp_entry)
            grp_entry['sczMember'] = members

            dst_dn = f"cn={grp_cn},ou=Groups,{co_dn}"
            dst_dns = dst.rfind(f"ou=Groups,dc=flat,dc={service}", f"(&(ObjectClass=sczGroup)(cn={grp_cn}))")

            ldif = dst.store(dst_dn, grp_entry)
            print("    - store: {}".format(ldif))

        print()

print(f"vc: {vc}")
exit(0)

# Cleanup phase
print("--- Cleanup ---")
for service, cos in collaborations.items():
    print("service: {}".format(service))

    organizations = dst.rfind("dc={}".format(service), '(&(objectClass=organization)(objectClass=extensibleObject))')
    for o_dn, o_entry in organizations.items():
        #print("o: {}".format(o_dn))
        #print("entry: {}".format(o_entry))

        if o_entry.get('description', None):
            co_name = o_entry['description'][0]
            co_fqdn = o_entry.get('host', [])

            if not fqdn in co_fqdn:
                print("skipping {}".format(co_fqdn))
                continue

            o_rdns = util.dn2rdns(o_dn)
            print("- o: {}".format(o_rdns['o'][0]))

            print("  - People")
            dst_dns = dst.rfind("ou=People,o={},dc={}".format(o_rdns['o'][0], service), '(objectClass=person)')
            for dst_dn, dst_entry in dst_dns.items():
                #print("  - dstdn: {}".format(dst_dn))
                #print("    entry: {}".format(dst_entry))

                if dst_entry.get('uid', None):
                    src_uid = dst_entry['uid'][0]
                    src_dns = src.rfind("ou=People,o={}".format(co_name), '(uid={})'.format(src_uid))
                    if len(src_dns):
                        for src_dn, src_entry in src_dns.items():
                            pass
                            #print("   - srcdn: {}".format(src_dn))
                    else:
                        print("    - dstdn: {}".format(dst_dn))
                        print("      srcdn not found, deleting {}".format(dst_dn))
                        dst.delete(dst_dn)

            print("\n  - Groups")
            dst_dns = dst.rfind("ou=Groups,o={},dc={}".format(o_rdns['o'][0], service), '(objectClass=sczGroup)')
            for dst_dn, dst_entry in dst_dns.items():
                #print("  - dstdn: {}".format(dst_dn))
                #print("    entry: {}".format(dst_entry))

                if dst_entry.get('description', None):
                    src_cn = dst_entry['description'][0]
                    src_dns = src.rfind("ou=Groups,o={}".format(co_name), '(cn={})'.format(src_cn))
                    if len(src_dns):
                        for src_dn, src_entry in src_dns.items():
                            pass
                            #print("   - srcdn: {}".format(src_dn))
                    else:
                        print("    - dstdn: {}".format(dst_dn))
                        print("      srcdn not found, deleting {}".format(dst_dn))
                        dst.delete(dst_dn)


            print()
